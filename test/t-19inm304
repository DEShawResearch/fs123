#!/usr/bin/env python3

# Test that we can read correctly in the window between max-age and
# max-age+stale-while-revalidate (which were both set to 4 above)

import os, sys
import tempfile
import errno
import time
import subprocess
import glob
opj = os.path.join

EXPORT_ROOT = os.getenv('EXPORT_ROOT')
MTPT = os.getenv('MTPT')
MTroot = os.getenv('MTroot')

# Fiddle with EvictPeriodMinutes so that no evictions happen while
# we're waiting for a cached file to expire.
def set_evict_period(minutes):
    subprocess.check_output(['fs123p7', 'ctl', MTPT, 'EvictPeriodMinutes', minutes])
    
def get_evict_period():
    return subprocess.check_output(['awk', '/^Fs123EvictPeriodMinutes/{print $2}', opj(MTPT, '.fs123_config')]).decode('utf-8').strip()

orig_evict_period=get_evict_period()
print('original EvictPeriodMinutes:', orig_evict_period)
# FIXME - we restore the evict_period at the end, but *not if we exit
# early*.
set_evict_period('10000')
print('new EvictPeriodMinutes: ', get_evict_period())
# The client doesn't recognize the new 'EvictPeriod' until
# the eviction thread fires again on its own.  So we have to
# wait for that to happen:
ncachedirs=16
waitfor = min(int(orig_evict_period)*60/ncachedirs, 30.) # Not more than 30 sec!
time.sleep( waitfor )
# This would be simpler if there were another ioctl that causes the
# eviction thread to fire.

wdname = tempfile.mkdtemp(prefix='t-19inm304', dir=EXPORT_ROOT)
basedname = os.path.basename(wdname)
os.chmod(wdname, 0O755)
with open(opj(wdname, '.fs123_cc_rules'), 'w') as f:
    f.write("""
 {
 "rulesfile-maxage": 5,
 "cc": "max-age=4,stale-while-revalidate=4"
}
""")
    
print("Testing 304 replies:")
wfname4 = opj(wdname, 'some.txt')
wfd4 = os.open(wfname4, os.O_RDWR|os.O_CREAT, 0O644)
os.system("fs123p7 setxattr %s"%(wfname4))
some_text = b'some text'
os.write(wfd4, some_text)
os.close(wfd4)
rfname4 = opj(MTPT, basedname, 'some.txt')
rfd4 = os.open(rfname4, os.O_RDONLY|os.O_DIRECT)
txt4 = os.read(rfd4, 128)
assert txt4 == some_text
os.close(rfd4)
before = subprocess.check_output(['awk', '/dc_rf_304/{print $2}', opj(MTPT, '.fs123_statistics')]).decode('utf-8').strip()
print("Waiting for max-age but within swr-window")
time.sleep(5) # between max-age and max-age + swr
rfd4 = os.open(rfname4, 0)
txt4 = os.read(rfd4, 128) # the first one should accept the stale
assert txt4 == some_text
os.close(rfd4)
time.sleep(1) 
after = subprocess.check_output(['awk', '/dc_rf_304/{print $2}', opj(MTPT, '.fs123_statistics')]).decode('utf-8').strip()
print("before: ", before, "after: ", after)
assert int(before)+1 == int(after), "expected dc_rf_304 statistic to increase by 1"

set_evict_period(orig_evict_period)
print('restored EvictPeriodMinutes:', get_evict_period())

exit(0)

