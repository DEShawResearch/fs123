#!/bin/bash

# See README for assumptions made by all the t-* tests
# in this directory.

reconnect(){
    fs123p7 ctl $MTPT Disconnected 0 || true
}

die(){
    reconnect
    1>&2 echo "$@"
    exit 1
}

trap 'echo 1>&2 $0: Exiting on ERR trap, line: $LINENO; reconnect; exit 1' ERR

set -x

delay=2	# long enough to make sure server will send Last-Modified header so client can cache the file

me=$(basename $0)
value=hello
newvalue=bye
f=$(cd $EXPORT_ROOT && mktemp -p. $me.XXXXXX)
chmod a+rx $EXPORT_ROOT/$f
printf "%s" "$value" > $EXPORT_ROOT/$f
sleep $delay	# wait for server skew to be satisfied

# Temporarily set the cache size to be large enough that the eviction
# loop doesn't interfere with disconnected operation:
fs123p7 ctl $MTPT CacheMaxFiles 10000
fs123p7 ctl $MTPT CacheMaxMBytes 10

[ "$(cat $MTPT/$f)" = "$value" ] || die "mismatch in $me for $MTPT/$f vs $EXPORT_ROOT/$f"
sleep 1  # lots of time for serialize to disk cache to finish

# We'd really like to block or disable or put-to-sleep
# the server for a short time.  We were able to do that
# with httpd by putting garbage in a .htaccess file, but
# it's not so easy with our libevent server.  So instead
# we put the client in disconnected mode.
fs123p7 ctl $MTPT Disconnected 1

# now change server contents
printf "%s" "$newvalue" > $EXPORT_ROOT/$f

[ "$(cat $MTPT/$f)" = "$value" ] || die "mismatch in $me after disconnect for $MTPT/$f vs $EXPORT_ROOT/$f"
# even after flushing it, if we're operating disconnected,
# we should find the file.
fs123p7 flushfile $MTPT/$f
[ "$(cat $MTPT/$f)" = "$value" ] || die "mismatch in $me after disconnect and flush for $MTPT/$f vs $EXPORT_ROOT/$f"

reconnect
sleep 10	# longer than server max_age_short

fs123p7 flushfile $MTPT/$f
[ "$(cat $MTPT/$f)" = "$newvalue" ] || die "mismatch in $me after reconnect for $MTPT/$f vs $EXPORT_ROOT/$f"

# Restore cache size to absurdly small values as in ./runtests
fs123p7 ctl $MTPT CacheMaxFiles 32
fs123p7 ctl $MTPT CacheMaxMBytes 16

exit 0
