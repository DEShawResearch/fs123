#!/bin/sh
set -eux

# We use Alpine to build a static fs123 binary, which is very useful for 
# containers or any other standalone low-resource environment

apk update
apk add git binutils make libgcc musl-dev gcc g++
apk add bash
apk add fuse-dev fuse-static
apk add libsodium-dev libsodium-static
apk add curl curl-dev curl-static
apk add util-linux
apk add libevent-dev libevent-static
apk add nghttp2-static openssl-libs-static zlib-static
apk add attr
apk add e2fsprogs
apk add valgrind
apk add python3

# Alpine's libc is libmusl, not glibc.  It doesn't have backtrace, so
# we have to jump through a few extra hoops to get stacktrace.hpp and
# backward.hpp to work.
apk add libdwarf libdwarf-dev libdwarf-static libelf-static elfutils-dev
export LDLIBS="-ldwarf -lelf -lz"
export CPPFLAGS="-DBACKWARD_HAS_DWARF=1 -I/usr/include/libdwarf"
export LDFLAGS="-static"
# Staticly compiled code doesn't play well with valgrind.  This
# answer: https://stackoverflow.com/a/7515951/989586 suggests that such
# problems occur when libc itself is staticly linked.  Note that
# prereqs.alpine:3.11 does *not* set LDFLAGS=-static, so if we do
# make check there, it should benefit from valgrind.
export FS123_TEST_WITH_VALGRIND=no

# This is sufficient to run make -f .../GNUmakefile check
# valgrind will report a couple of false positives.
#
set +eux
