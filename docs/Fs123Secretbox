The fs123 client and sever can be configured to use shared secrets and
libsodium's 'secretbox' cryptographic primitives to secure their
communication.  This document describes fs123's security capabilities,
the fs123-secretbox content-encoding, command line options related to
security, and the details of the internal protocols and formats.

Goals and limitations
---------------------

IMPORTANT: FS123-SECRETBOX IS NOT A HIGH-SECURITY PROTOCOL.  A good
analogy is to a locked door, capable of keeping out casual intruders.
Don't think of it as a high-security bank-vault capable of keeping out
determined attackers.  As far as we know, the fs123-secretbox scheme
offers a reasonable level of confidentiality, but there are known
weaknesses related to authenticity: it is subject to replay attacks
and some semantically important data is not authenticated (see below).

Since fs123 is an http protocol, it's relatively easy for unprivileged
users to create ad hoc clients (e.g., python scripts or invocations of
/usr/bin/curl).  Without fs123-secretbox, such clients are free to
peruse the contents of an exported fs123 directory, regardless of uid
and file permissions.  Without fs123-secretbox, it's best to think of
an fs123 server as an open, publicly accessible HTTP server, or as a
door with a "Welcome.  Please come in" sign.

The fs123 protocol is designed to work well with http caches.  Without
fs123-secretbox, anyone with access to those caches, or with the
ability to eavesdrop on network connections can see all information
transmitted to and from legitimate users.  With fs123-secretbox, the
data transmitted over the network and stored in caches is encrypted
and is protected from eavesdroppers and cache managers.

The basic idea behind fs123-secretbox is that clients and servers
share a secret and encrypt and authenticate their communication with
that secret.  Administrators must guarantee that the secrets are
only known to parties trusted to keep the following promise:

  It will not forward any unencrypted information (data or metadata)
  to any user or process that would not normally have access to that
  information under POSIX permissioning rules (i.e., mode bits, uid,
  gid, etc).

The mount.fs123p7 client keeps this promise by adding the
-odefault_permissions to its mount options.  According to FUSE
documentation, this option tells the kernel to "enable permission
checking, restricting access based on file mode".

It's up to system administrators to restrict access to the
'sharedkeydir' (see below) so that the secret shared keys are unknown
to ad hoc clients run by unprivileged users, potential eavesdroppers
and untrusted cache managers.  If the sharedkeydir is compromised, any
benefit of using fs123-secretbox is lost.  It is as if the door were
unlocked and the original "Welcome.  Please come in" sign was
installed.

Known weaknesses of fs123-secretbox
-----------------------------------

The fs123-secretbox scheme provides secure authentication of the
message body only.  Semantically important data in message headers
(e.g., errno, estale-cookie and directory offsets) is not
authenticated.  Thus, a man-in-the-middle (MitM) could conceivably
alter this data, either in-flight or in a cache.  Furthermore,
although the message body is authenticated, it is subject to replay
attacks.  An MitM could substitute one properly signed message body
for another.  Both attacks would be undetectable by the client and
could lead to client misbehavior.

Content-encoding:  fs123-secretbox
----------------------------------

The fs123 protocol relies on an HTTP transport layer.  The protocol is
secured by negotiating using a non-standard value of the standard HTTP
Content-encoding header.  This strategy is compatible with caches and
other http infrastructure, which should transparently handle
content-encodings that they don't understand.

We define a new Content-encoding: fs123-secretbox, modeled closely
(but not exactly) on the aes128gcm encoding defined in rfc8188.  As in
rfc8188, the encoding relies on a secret shared by sender and
receiver.  The details of how the "keying material" is shared is
unspecified by the rfc.  For fs123, we assume that a directory,
'sharedkeydir',containing shared keys is available to clients and
servers.

Message bodies that are encrypted must have a header:

   Content-encoding: fs123-secretbox

Clients that "understand" the fs123-secretbox encoding (and that
are configured with a sharedkeydir) should add a:

   Accept-encoding: fs123-secretbox

header to their requests.

Note that Accept-encoding in a request is *non-binding* on the server.
The decision of whether to encode (encrypt) at all, or whether to
reject requests that lack Accept-encoding is ultimately made by the
server (see Command Line Options, below).  Thus, it's the server's
responsibility to protect itself from unauthorized clients (i.e.,
those that aren't in possession of the contents of the sharedkeydir) by
responding with "400 Not Allowed" to requests that lack the
Accept-encoding: fs123-secretbox header.

Encrypted Requests
------------------

Recall that the fs123 URL schema is:

HOSTNAME:PORT/SEL/EC/TOR/fs123/ProtoMajor/ProtoMinor/FUNCTION/PA/TH?QUERY

which potentially leaks metadata (e.g., the existence of /PA/TH) and
is unauthenticated.

In some situations, it may be desirable to authenticate and
maintain the confidentiality of requests.  To do so, 
we introduce a new /FUNCTION:

    /e  (mnemonic "envelope" or "encrypt")

Rather than providing /FUNCTION/PA/TH?QUERY as cleartext in GET or
HEAD requests, clients may instead request:

HOSTNAME:PORT/SEL/EC/TOR/fs123/ProtoMajor/ProtoMinor/e/<encoded>

where <encoded> is base64(fs123-secretbox(/FUNCTION/PA/TH?QUERY)).

To facilitate caching, the nonce used to encrypt/authenticate is
derived deterministically as a keyed cryptographic hash (libsodium's
crypto_generichash) of the cleartext (/FUNCTION/PA/TH?QUERY).  Thus,
the same request made with the same key will always map to the same
/e/ form, and can be cached accordingly.  The key bits used for
nonce derivation are disjoint from the ones used for encryption.  A
key used to encrypt requests must be at least 48 bytes long:  the
first 32  bits are used to encrypt and the last 16 are used to derive
the nonce.  

When the server sees /FUNCTION = /e, it decodes everything after the
/e/ with base64 (rfc4648), and then authenticates and decrypts the
intermediate result with fs123-secretbox to obtain the original
request's: /FUNCTION/PA/TH?QUERY.  If authentication fails, the
request is rejected with a 400.


Command line options:
---------------------

fs123's security features are enabled by specifying a 'sharedkeydir' on
the command line.

On the client:
   -oFs123Sharedkeydir=/pa/th
On the server:
   --sharedkeydir=/pat/th

Note that the server reads /pa/th *before* its --chroot
option have taken effect.  The encoding-keyid-file arguments
default to "encoding", 

The format and naming conventions of the files in the sharedkeydir is the
same for client and server (see below).  If the specified sharedkeydir
is the empty string (the default), then no security features are
supported: the client will not send an Accept-encoding header, nor
will it encrypt requests; the server will not encrypt replies, nor
will it understand encrypted requests.

The following contingent options are only meaningful if --sharedkeydir
is non-empty:

Client-side:
-oFs123SharedkeydirRefresh=<seconds>
-oFs123EncodingKeyidFile=name
-oFs123EncryptRequests=<bool>
-oFs123AllowUnencryptedReplies=<bool>

Server-side options:
--sharedkeydir-refresh=<seconds>
--encoding-keyid-file=name
--[no]allow-unencrypted-replies
--[no]allow-unencrypted-requests

The 'refresh' option is an integer number of seconds (default: 30).
Any key found in the directory will be retained in memory
for the  refresh time, after which it will be refreshed from disk
if it is needed again.

The encoding-keyid-file option tells the process (client or server) to
use the key named in that file for encryption.  If the
encoding-keyid-file option is an absolute path (starts with '/'), then
it is relative to the process chroot (if any).  Otherwise, the keyid
file is found relative to sharedkeydir (which was opened before chroot).

The default value is 'encoding', which means that that clients and
servers will expect to find a keyid file (see below) called:

    <sharedkeydir>/encoding.keyid

By default, the client will encrypt requests if it has a shared
key directory.  Encrypted requests may be disabled with:

  -oFs123EncryptRequests=false.

By default, the server allows unencrypted requests, even if it has
a shared key directory.  To reject unencrypted requests, use the option:
  --allow-unencrypted-requests=false

If a sharedkeydir is provided, the server rejects requests that
lack Accept-encoding: fs123-secretbox with "406 Not Acceptable".

Similarly, when the client is configured with a sharedkeydir, it will
reject any reply that cannot be authenticated.  This includes
cleartext replies that lack an Accept-encoding header.


Sharedkeydir contents and file formats
-----------------------------------

IT IS ESSENTIAL THAT THE CONTENTS OF THE SHAREDKEYDIR REMAIN
CONFIDENTIAL.  Anyone with access to the contents of the sharedkeydir
can read and forge requests and replies.  A COMPROMISED SHAREDKEYDIR
EXPOSES *ALL* COMMUNICATION THAT RELIED ON THOSE KEYS: PAST,
PRESENT AND FUTURE.  The sharedkeydir should have limited access
permissions (0700).

- sharedkey files:

In the fs123-secretbox protocol, shared keys are identified by
a character string up to 255 bytes long.  The shared key
named "foo" is found in the file:

<sharedkeydir>/foo.sharedkey

Names (e.g., 'foo') must:
- be at least 1 and no more than 255 characters in length
- be comprised of  alphanumeric characters, '-', '_' and '.'.
- not start with '.'

A sharedkey file must contain nothing but hex-digits, whitespace and
the ':' character.  The contents must be parseable with libsodium's
sodium_hex2bin function.  E.g.,

0123:4567 89 ab cd ef 01:23:45:67  89 abcd ef 01234567 89abcdef 01234567 89abcdef deadbeef 0badcafe 01234567 89abcdef

is a 48-byte long key.

A shared key file can easily be created with od.  E.g., to create
a 48-byte key named 'foo':

$ od -An -N48 -t x4  < /dev/urandom > sharedkeydir/foo.sharedkey

- keyid files

In order to facilitate "key rotation" (see below), a second file type
is supported: the keyid file.  The contents of the keyid is a key
identifier (see above) preceded and followed by optional whitespace.

keyid files need not be in the <sharedkeydir>, but to minimize confusion,
we adopt the convention that keyid filenames end with the ".keyid"
suffix.  E.g., <sharedkeydir>/encrypt.keyid.

Details of the fs123-secretbox content-encoding
-----------------------------------------------

The "wire format" of an fs123-secretbox encoded message differs from
rfc8188 only by the length of the nonce (called a salt in rfc8188).
It consists of a variable-length header:

| nonce(24) | recordsz(4) | idlen(1) | keyid(idlen) |

followed by the authenticated ciphertext of exactly recordsz bytes.
The plaintext must be padded before encryption and authentication by
following it with exactly one 0x2 byte, and may be padded further with
any number of 0x0 bytes at the sender's discretion. The recordsz is
exactly crypto_secretbox_MACBYTES (16) plus the length of the padded
plaintext.  The Content-length is exactly recordsz + 29 + idlen.

The recordsz is an unsigned integer in "network byte order".

The nonce may be generated non-deterministically (e.g., libsodium's
randombytes_buf) or deterministically (see above in Encrypted
Requests).  However it is generated, IT IS ESSENTIAL THAT THE SAME
NONCE MUST NEVER BE RE-USED WITH THE SAME KEY AND DIFFERENT CLEARTEXT.

Threats:
--------

- root compromise
The fs123-secretbox encoding provides NO PROTECTION against a root
compromise on either endpoint (client or server).  An attacker with
root on the server can simply access the export_root without even
interacting with fs123.  An attacker with root on a client can simply
masquerade as any legitimate user on the client and access the
fs123 mountpoint via the normal fs123 filesystem interface.

- shared key compromise

A shared key compromise defeats all of the fs123-secretbox security
features.  Obviously, a root compromise entails a shared key
compromise (root can simply read the files in sharedkeydir). But there
are potentially other ways for the keys to be compromised without
the attacker necessarily gaining root.  E.g., gaining physical access
to a disk that once held the sharedkeydir, recovering the sharedkeydir
from a backup tape, examining the memory of a running client or server
process (e.g., with a debugger), or examining the contents of a client
or server core dump (steps have been taken to mitigate this risk).

An attacker in posession of the keys is able to forge authenticated
messages and decode the replies.  By forging requests, the attacker
can freely peruse the contents of the entire exported tree.  A passive
eavesdropper can see what files are in use by legitimate clients along
with their contents.  The attacker can continue to do so for as long
as the keys are in use and can do so retroactively if he has
archived the ciphertext.  I.e., there is neither "forward secrecy" nor
"backward secrecy" against compromised keys.

- unencrypted metadata

The 7.1 protocol sends fs123-errno and fs123-chunk-next-offset metadata in
unencrypted http headers.  Future versions of the protocol will eliminate
the http headers and place the metadata in the body, where it will
be encoded by fs123-secretbox.

- log files, syslog and statistics

Messages written to log files - especially diagnostic log files -
frequently contain decoded information.  Errors reported to syslog
contain information about the "responsible" processes and uids and
sometimes contain decoded information as well.  "Statistics" files
contain counts and timing information that could potentially reveal
valuable metadata.

It wouldn't be that hard to audit and sanitize the logs and
diagnostics, but the logs would be significantly less valuable.  For
now (2018) we've made a conscious decision to keep the logs verbose,
at the expense of confidentiality.  This tradeoff may change.

- Replay and DoS attacks

There is no mechanism to deter "replay" attacks.  If an eavesdropper
captures an encrypted GET, they can replay that request and the server
will respond.  Since the reply is encrypted, there is little the
attacker can learn from the reply.  But since small requests can
generate relatively large replies, it's possible to leverage a replay
into a DoS attack by forcing the server to expend resources to
generate and send the reply.

Key rotation:
------------

As outlined above, there are many ways for the contents of the
sharedkeydir to be compromised.  Rotating the keys in no way makes
it more secure or less prone to compromise.  It does, however,
slightly mitigate the consequences of a compromise.  If the keys
are rotated regularly with an interval of longer than the lifetime of
messages in caches, i.e., every T seconds where:

  T > (max-age + stale-while-revalidate + stale-if-error)

then a compromised sharedkeydir only exposes keys corresponding to
data transmitted during a window of approximately 2*T.

Rotating the keys in the sharedkeydir is slightly tricky for several
reasons:

- both clients and servers can act as both encrypters and decrypters.

- any new sharedkey file must be present in the sharedkeydir on all
  decrypters for at least the sharedkeydirRefresh time before the
  encrypt-id on the encrypter is changed.

- any old sharedkey must continue to be present in the sharedkeydir on all
  decrypters for at least the cache lifetime after the encrypter has
  stopped using it.

- nothing happens in a distributed system "instantaneously".  Pushing
  out a new file can take a long time when machines are down,
  unreachable, etc.

This implies a two-step update:

When it's time to rotate the keys, a new sharedkey file is
distributed and the expired sharedkey is removed from all sharedkeydirs.
The encrypt-id is unchanged.  Then, some time later (sharedkeydir_refresh
after it is certain the sharedkeydir has been updated on all receivers),
the "encoding.keyid" file is replaced with a new file that referes to
the sharedkey file.  This encoding.keyid file remains in place until
it's time to rotate the keys again, some time after the lifetime of
messages stored in caches.


Transtioning
------------

Consider an installation already up and running without security.
How do we enable security features without disrupting operations?

- upgrade all client and server software to versions that support
  secretbox.  Leave configurations unchanged.  I.e., no --sharedkeydir
  or -oFs123Sharedkeydir options.

- Establish a location, e.g., /etc/fs123/secrets/ and populate it
  identically on all clients and servers.

- Restart servers with --sharedkeydir=... and
  --allow-unencrypted-replies options.

- umount -l clients.  Restart them with -oFs123Sharedkeydir=... and (if
  desired) -oFs123EncryptRequests=true

- wait for lazily umounted clients to terminate.  (This may take a
  *long* time if there are long-running binaries).

- Restart servers without the --allow-unencrypted-replies option.

- Purge caches.

In general, it's important to think about what's in cache when
changing any fs123 policy.  After transitioning from a no-secretbox
to a with-secretbox strategy, caches will contain unencrypted data.
They must be purged before the system can be considered secure.

Similarly, after switching from a with-secretbox strategy to a
no-secretbox strategy, caches will contain encrypted data.  If the
caches aren't purged, new clients configured without secretbox will be
unable to make sense of the encrypted replies they get back from
caches.


Utilities
---------

One utility is provided (and installed with the client rpm):

/usr/bin/fs123secretbox

It has one required command line argument: sharedkeydir.  It reads one
entire fs123-secretbox encoded message from stdin and writes the
decoded contents to stdout.

For example, someone with access to the shared keys can decode data retrieved with curl:

drdws0134$ curl -s -H Accept-encoding:fs123-secretbox  http://nyctestgardenweb1:8870/test/fs123/7/1/d\?128,0,0 | fs123secretbox fs123-secrets
2:.., 4 0
9:notgarden, 4 1500866072037794992
4:xxx1, 4 1500866072037800714
5:Linux, 4 1500866072037803469
7:CentOS6, 10 0
1:., 4 1500866072037761839
3:etc, 4 1500866073191710713
drdws0134$


Note that fs123secretbox can be combined with other utilities such as
echo, base64, etc.  For example, if a log file contains:

GET /e/Bu1osZe8J6zsk3xhXzQPo1zimmlxQabjAAAAMAI5OXfKoVK08+zV8S5r0r+ujXXnga8WPeEQzBxdNabEMWyRcDmCd61UTwI6eP+RUDmJIA==

The plaintext request can be recovered with:


drdws0134$ echo Bu1osZe8J6zsk3xhXzQPo1zimmlxQabjAAAAMAI5OXfKoVK08+zV8S5r0r+ujXXnga8WPeEQzBxdNabEMWyRcDmCd61UTwI6eP+RUDmJIA== | base64 -d | fs123secretbox /tmp/fs123-6a36797e/s/secrets.d
/f/t-07modified.DZNq9H?128;0

N.B.  the "secret" shared keys in the last example are:

drdws0134$ cat /tmp/fs123-6a36797e/s/secrets.d/encoding.keyid 
99
drdws0134$ cat /tmp/fs123-6a36797e/s/secrets.d/99.sharedkey 
01 23 45 67 89 ab cd ef 01 23 45 67  89 abcd ef 01234567 89abcdef 01234567 89abcdef deadbeef 0badcafe 01234567 89abcdef

